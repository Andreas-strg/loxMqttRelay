# .github/workflows/main.yml
name: CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  # --- TEST STAGE ---
  test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/astral-sh/uv:python3.13-bookworm-slim
    steps:
      - name: Check out source
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y gcc python3-dev

      - name: Install Python packages
        run: |
          uv pip install --system .
          uv pip install --system .[test]

      - name: Build Cython modules
        run: |
          cd src/loxwebsocket/cython_modules
          python setup.py build_ext --inplace
          cd ../../../

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=loxmqttrelay --cov-report=xml --cov-report=term

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml

  # --- BUILD & PUSH DOCKER STAGE ---
  docker-build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # AMD64 builds
          - platform: "linux/amd64"
            optimization: "-O3 -march=native -ffast-math"
            suffix: "optimized"
          - platform: "linux/amd64"
            optimization: "-O2 -mtune=generic"
            suffix: "compatible"
          # ARM64 builds (for Raspberry Pi 4, newer ARM servers, etc.)
          - platform: "linux/arm64"
            optimization: "-O3 -mcpu=native -ffast-math"
            suffix: "optimized"
          - platform: "linux/arm64"
            optimization: "-O2 -mtune=generic"
            suffix: "compatible"

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Check out source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: ${{ matrix.platform }}
          build-args: |
            OPTIMIZATION_FLAGS=${{ matrix.optimization }}
          provenance: true
          sbom: true
          outputs: type=image,name=${{ vars.DOCKER_USERNAME }}/loxmqttrelay,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          # Prepend the matrix suffix (optimized or compatible) so that later we can filter these files
          touch "${{ runner.temp }}/digests/${{ matrix.suffix }}-${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}-${{ matrix.suffix }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  # --- MERGE STAGE ---
  merge:
    needs: [docker-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push manifest lists
        working-directory: ${{ runner.temp }}/digests
        run: |
          # Create manifest for optimized images
          docker buildx imagetools create \
            -t ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest-optimized \
            -t ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:${{ github.sha }}-optimized \
            $(ls -1 *optimized* | xargs -I {} basename {} | xargs -I DIG echo "${{ vars.DOCKER_USERNAME }}/loxmqttrelay@sha256:DIG")

          # Create manifest for compatible images
          docker buildx imagetools create \
            -t ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest-compatible \
            -t ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:${{ github.sha }}-compatible \
            $(ls -1 *compatible* | xargs -I {} basename {} | xargs -I DIG echo "${{ vars.DOCKER_USERNAME }}/loxmqttrelay@sha256:DIG")

          # Create manifest for latest tag (using optimized images)
          docker buildx imagetools create \
            -t ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest \
            -t ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:${{ github.sha }} \
            $(ls -1 *optimized* | xargs -I {} basename {} | xargs -I DIG echo "${{ vars.DOCKER_USERNAME }}/loxmqttrelay@sha256:DIG")

      - name: Inspect images
        run: |
          docker buildx imagetools inspect ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest
          docker buildx imagetools inspect ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest-optimized
          docker buildx imagetools inspect ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest-compatible
