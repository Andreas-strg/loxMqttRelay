name: Main CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - multiarch

jobs:
  # --- TEST STAGE ---
  # test:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/astral-sh/uv:python3.13-bookworm-slim
  #   steps:
  #     - name: Check out source
  #       uses: actions/checkout@v4

  #     - name: Install build dependencies
  #       run: |
  #         apt-get update
  #         apt-get install -y gcc python3-dev curl build-essential rustc cargo

  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@v1
  #       with:
  #         toolchain: stable 

  #     # --- NEW STEP: Cache pip packages ---
  #     - name: Cache pip packages
  #       uses: actions/cache@v3
  #       with:
  #         # caching the pip downloads/wheels
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('setup.py', 'requirements.txt', 'pyproject.toml') }}
  #         restore-keys: ${{ runner.os }}-pip-
    
  #     - name: Install Python packages
  #       run: |
  #         uv pip install --system .[test]

  #     - name: Run tests with coverage
  #       run: |
  #         pytest tests/ --cov=loxmqttrelay --cov-report=xml --cov-report=term

  #     - name: Upload coverage report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage.xml
  #         path: coverage.xml

  # --- BUILD & PUSH DOCKER STAGE ---
  docker-build:
    #needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ["linux/amd64", "linux/arm64"]
    outputs:
      amd64_tag: ${{ steps.set_tag.outputs.amd64_tag }}
      arm64_tag: ${{ steps.set_tag.outputs.arm64_tag }}
    steps:
      - name: Check out source
        uses: actions/checkout@v4

      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v3

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/loxmqttrelay

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platform }}
          tags: ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:multiarch-${{ matrix.platform }}-${{ github.sha }}
          annotations: ${{ steps.meta.outputs.annotations }}
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set output tags
        id: set_tag
        run: |
          if [ "${{ matrix.platform }}" = "linux/amd64" ]; then
            echo "amd64_tag=multiarch-linux-amd64-${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "arm64_tag=multiarch-linux-arm64-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  # --- CREATE MULTI-ARCH IMAGE ---
  create-manifest:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push multi-arch manifest
        run: |
          # Create manifest list and push
          docker manifest create ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest-multiarch \
            --amend ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:multiarch-linux-amd64-${{ github.sha }} \
            --amend ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:multiarch-linux-arm64-${{ github.sha }}
          
          # Annotate the manifest with architecture information
          docker manifest annotate ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest-multiarch \
            ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:multiarch-linux-amd64-${{ github.sha }} --arch amd64 --os linux
          docker manifest annotate ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest-multiarch \
            ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:multiarch-linux-arm64-${{ github.sha }} --arch arm64 --os linux
          
          # Push the manifest
          docker manifest push ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:latest-multiarch
