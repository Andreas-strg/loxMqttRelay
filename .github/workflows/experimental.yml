name: Rust Rewrite CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - rust-rewrite

jobs:
  # --- TEST STAGE ---
  # test:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/astral-sh/uv:python3.13-bookworm-slim
  #   steps:
  #     - name: Check out source
  #       uses: actions/checkout@v4

  #     - name: Install build dependencies
  #       run: |
  #         apt-get update
  #         apt-get install -y gcc python3-dev curl build-essential rustc cargo

  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@v1
  #       with:
  #         toolchain: stable 

  #     # --- NEW STEP: Cache pip packages ---
  #     - name: Cache pip packages
  #       uses: actions/cache@v3
  #       with:
  #         # caching the pip downloads/wheels
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('setup.py', 'requirements.txt', 'pyproject.toml') }}
  #         restore-keys: ${{ runner.os }}-pip-
      
  #     - name: Install Python packages
  #       run: |
  #         uv pip install --system maturin
  #         uv pip install --system .
  #         uv pip install --system .[test]
  #         uv pip install --system .[dev]

  #     - name: Build Rust libraries with maturin
  #       run: |
  #         export PYO3_USE_ABI3_FORWARD_COMPATIBILITY=1
  #         maturin build --release --compatibility off

  #     - name: Install built Rust wheel
  #       run: uv pip install target/wheels/loxmqttrelay-*.whl --system

  #     - name: Build Cython modules
  #       run: |
  #         cd src/loxwebsocket/cython_modules
  #         python setup.py build_ext --inplace
  #         cd ../../../

  #     - name: Run tests with coverage
  #       run: |
  #         pytest tests/ --cov=loxmqttrelay --cov-report=xml --cov-report=term

  #     - name: Upload coverage report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage.xml
  #         path: coverage.xml

  # --- BUILD & PUSH DOCKER STAGE ---
  docker-build:
    #needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # AMD64 builds
          - platform: "linux/amd64"
            optimization: "-O3 -march=native -ffast-math"
            suffix: "optimized"
          - platform: "linux/amd64"
            optimization: "-O2 -mtune=generic"
            suffix: "compatible"
          # ARM64 builds (e.g., Raspberry Pi 4, newer ARM servers, etc.)
          - platform: "linux/arm64"
            optimization: "-O3 -mcpu=cortex-a72 -ffast-math"
            suffix: "optimized"
          #- platform: "linux/arm64"
          #  optimization: "-O2 -mtune=generic"
          #  suffix: "compatible"

    steps:
      - name: Check out source
        uses: actions/checkout@v4

      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v3

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/loxmqttrelay

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platform }}
          tags: |
            ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:experimental-${{ github.sha }}-${{ matrix.suffix }}
            ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:experimental-latest-${{ matrix.suffix }}
          build-args: |
            OPTIMIZATION_FLAGS=${{ matrix.optimization }}
            TARGET=${{ matrix.platform == 'linux/arm64' && 'aarch64-unknown-linux-gnu' || 'unknown-linux-gnu' }}
            BASE_IMAGE=${{ matrix.platform == 'linux/arm64' && 'python:3.13-slim-bookworm' || 'ghcr.io/astral-sh/uv:python3.13-bookworm-slim' }}
          annotations: ${{ steps.meta.outputs.annotations }}
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Tag AMD64 optimized version as latest
        if: matrix.platform == 'linux/amd64' && matrix.suffix == 'optimized' && github.event_name != 'pull_request'
        run: |
          docker pull ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:experimental-${{ github.sha }}-optimized
          docker tag ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:experimental-${{ github.sha }}-optimized ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:experimental-latest
          docker push ${{ vars.DOCKER_USERNAME }}/loxmqttrelay:experimental-latest
